{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/careers.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "let url = 'https://api.lever.co/v0/postings/gynger?mode=json';\n\nif (window.location.pathname === '/careers') {\n  fetch(url)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .then((data) => {\n      let roles = data;\n      console.log(data);\n\n      // Arrays to store unique values\n      let uniqueWorkplaceTypes = [];\n      let uniqueCommitments = [];\n      let uniqueTeams = [];\n      let uniqueLocations = [];\n\n      // Object to store jobs by team\n      let jobsByTeam = {};\n\n      // Collect unique values for each field and organize jobs by team\n      roles.forEach(function (role) {\n        // Add workplaceType if unique\n        if (role.workplaceType && !uniqueWorkplaceTypes.includes(role.workplaceType)) {\n          uniqueWorkplaceTypes.push(role.workplaceType);\n        }\n\n        // Add commitment if unique\n        if (role.categories.commitment && !uniqueCommitments.includes(role.categories.commitment)) {\n          uniqueCommitments.push(role.categories.commitment);\n        }\n\n        // Add team if unique and organize jobs by team\n        if (role.categories.team) {\n          const { team } = role.categories;\n\n          if (!uniqueTeams.includes(team)) {\n            uniqueTeams.push(team);\n          }\n\n          // Add job to the team's array\n          if (!jobsByTeam[team]) {\n            jobsByTeam[team] = [];\n          }\n          jobsByTeam[team].push(role);\n        }\n\n        // Add locations if unique\n        if (role.categories.allLocations && role.categories.allLocations.length) {\n          role.categories.allLocations.forEach(function (location) {\n            if (!uniqueLocations.includes(location)) {\n              uniqueLocations.push(location);\n            }\n          });\n        }\n      });\n\n      // Log the unique values and jobs by team\n      console.log('Unique Workplace Types:', uniqueWorkplaceTypes);\n      console.log('Unique Commitments:', uniqueCommitments);\n      console.log('Unique Teams:', uniqueTeams);\n      console.log('Unique Locations:', uniqueLocations);\n      console.log('Jobs By Team:', jobsByTeam);\n\n      // Update the dropdowns with unique values\n      updateDropdown('[data-dropdown-location-type]', uniqueWorkplaceTypes, 'All');\n      updateDropdown('[data-dropdown-location]', uniqueLocations, 'All');\n      updateDropdown('[data-dropdown-team]', uniqueTeams, 'All');\n      updateDropdown('[data-dropdown-worktype]', uniqueCommitments, 'All');\n\n      // Function to update dropdown content\n      function updateDropdown(selector, options, allText) {\n        const dropdown = $(selector);\n        if (dropdown.length) {\n          const listInner = dropdown.find('.filter-dropdown_list-inner');\n\n          // Clear existing options\n          listInner.empty();\n\n          // Add \"All\" option with active class by default\n          listInner.append(\n            `<a href=\"#\" class=\"filter-dropdown_list-link w-inline-block active\" data-value=\"all\"><div>${allText}</div></a>`\n          );\n\n          // Add each unique option\n          options.forEach(function (option) {\n            listInner.append(\n              `<a href=\"#\" class=\"filter-dropdown_list-link w-inline-block\" data-value=\"${option}\"><div>${option}</div></a>`\n            );\n          });\n\n          // Add click handlers for filtering\n          listInner.find('.filter-dropdown_list-link').on('click', function (e) {\n            e.preventDefault();\n\n            // Remove active class from all links in this dropdown\n            $(this)\n              .closest('.filter-dropdown_list-inner')\n              .find('.filter-dropdown_list-link')\n              .removeClass('active');\n\n            // Add active class to clicked link\n            $(this).addClass('active');\n\n            // Apply filters\n            applyFilters();\n          });\n        }\n      }\n\n      // Filter Manager - handles the current filter state\n      const filterManager = {\n        // Get active filters from the UI\n        getActiveFilters: function () {\n          return {\n            workplaceType: $(\n              '[data-dropdown-location-type] .filter-dropdown_list-link.active'\n            ).data('value'),\n            location: $('[data-dropdown-location] .filter-dropdown_list-link.active').data('value'),\n            team: $('[data-dropdown-team] .filter-dropdown_list-link.active').data('value'),\n            commitment: $('[data-dropdown-worktype] .filter-dropdown_list-link.active').data(\n              'value'\n            ),\n          };\n        },\n\n        // Check if job item matches the filters\n        matchesFilters: function (item, filters) {\n          // Check workplace type\n          if (filters.workplaceType !== 'all') {\n            if ($(item).attr('data-workplace-type') !== filters.workplaceType) {\n              return false;\n            }\n          }\n\n          // Check location\n          if (filters.location !== 'all') {\n            if (!$(item).attr('data-location').includes(filters.location)) {\n              return false;\n            }\n          }\n\n          // Check team\n          if (filters.team !== 'all') {\n            if ($(item).attr('data-team') !== filters.team) {\n              return false;\n            }\n          }\n\n          // Check commitment\n          if (filters.commitment !== 'all') {\n            if ($(item).attr('data-commitment') !== filters.commitment) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n      };\n\n      // Apply filters to the job items\n      function applyFilters() {\n        const filters = filterManager.getActiveFilters();\n        let visibleJobsCount = 0;\n\n        // Get all job items\n        const jobItems = $('[data-roles=\"item\"]');\n\n        // Reset all items visibility first\n        jobItems.show();\n\n        // Apply filters to each item\n        jobItems.each(function () {\n          if (filterManager.matchesFilters(this, filters)) {\n            $(this).show();\n            visibleJobsCount++;\n          } else {\n            $(this).hide();\n          }\n        });\n\n        // Handle team sections visibility\n        $('[data-roles=\"part\"]').each(function () {\n          const teamSection = $(this);\n          const visibleItems = teamSection.find('[data-roles=\"item\"]:visible').length;\n\n          // Hide team section if it has no visible jobs\n          if (visibleItems === 0) {\n            teamSection.hide();\n          } else {\n            teamSection.show();\n          }\n        });\n\n        // Update counter\n        $('[roles-counter]').text(visibleJobsCount);\n\n        // If all filters are set to 'all', make sure everything is shown\n        if (\n          filters.workplaceType === 'all' &&\n          filters.location === 'all' &&\n          filters.team === 'all' &&\n          filters.commitment === 'all'\n        ) {\n          jobItems.show();\n          $('[data-roles=\"part\"]').show();\n          $('[roles-counter]').text(jobItems.length);\n        }\n      }\n\n      // Get container to append team sections\n      const rolesContainer = $('.careers-roles_list');\n\n      // Clone template elements (should be hidden in the HTML)\n      const teamPartTemplate = $('[data-roles=\"part\"]:first').clone();\n      const roleItemTemplate = $('[data-roles=\"item\"]:first').clone();\n\n      // Clear existing content\n      rolesContainer.empty();\n\n      // Create sections for each team\n      uniqueTeams.forEach(function (team) {\n        // Skip if team doesn't have any jobs\n        if (!jobsByTeam[team] || jobsByTeam[team].length === 0) return;\n\n        // Clone team section template\n        const teamSection = teamPartTemplate.clone();\n\n        // Set team title\n        teamSection.find('[data-roles=\"team-title\"]').text(team);\n\n        // Get the list container for jobs\n        const teamList = teamSection.find('[data-roles=\"team-list\"]');\n        teamList.empty();\n\n        // Add jobs for this team\n        jobsByTeam[team].forEach(function (job) {\n          // Clone job item template\n          const jobItem = roleItemTemplate.clone();\n\n          // Populate job item\n          jobItem.find('[data-roles=\"item-title\"]').text(job.text);\n          jobItem.find('[data-roles=\"item-location\"]').text(job.categories.allLocations.join(', '));\n          jobItem.find('[data-roles=\"item-location-type\"]').text(job.workplaceType || '');\n          jobItem.find('[data-roles=\"item-commitment\"]').text(job.categories.commitment || '');\n\n          // Set link\n          jobItem\n            .find('[data-roles=\"item-link\"]')\n            .attr('href', job.hostedUrl || `/careers/role?=${job.id}`);\n\n          // Add data attributes for filtering\n          jobItem.attr('data-workplace-type', job.workplaceType || '');\n          jobItem.attr('data-commitment', job.categories.commitment || '');\n          jobItem.attr('data-team', team);\n          jobItem.attr('data-location', job.categories.allLocations.join(', '));\n\n          // Add to team list\n          teamList.append(jobItem);\n        });\n\n        // Add team section to container\n        rolesContainer.append(teamSection);\n      });\n\n      // Init\n      $('.careers-roles_loading').hide();\n      $('.careers-roles_part').show();\n    })\n    .catch((error) => console.error('Error fetching data:', error));\n}\n"],
  "mappings": "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",
  "names": ["location"]
}
